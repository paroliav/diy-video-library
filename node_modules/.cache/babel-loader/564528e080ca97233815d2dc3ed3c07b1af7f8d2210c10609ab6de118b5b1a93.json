{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import { Star, X, AlertCircle, Facebook } from 'lucide-react';\n\n// const VideoCard = ({ video, onPlay }) => (\n//   <div className=\"flex flex-col w-48 m-2 cursor-pointer border\">\n//     <div className=\"relative w-full h-28 bg-gray-200 rounded-md overflow-hidden flex items-center justify-center\" onClick={() => onPlay(video)}>\n//       {React.isValidElement(video.thumbnail) ? (\n//         video.thumbnail\n//       ) : (\n//         <img src={video.thumbnail} alt={video.title} className=\"w-full h-full object-cover\" />\n//       )}\n//     </div>\n//     <h3 className=\"mt-2 text-sm font-semibold truncate\">{video.title}</h3>\n//     <div className=\"flex mt-1\">\n//       {[...Array(5)].map((_, i) => (\n//         <Star\n//           key={i}\n//           size={16}\n//           fill={i < video.rating ? 'currentColor' : 'none'}\n//           className={i < video.rating ? 'text-yellow-400' : 'text-gray-300'}\n//         />\n//       ))}\n//     </div>\n//   </div>\n// );\n\n// const VideoPlayer = ({ video, onClose }) => {\n//   const getEmbedUrl = (url) => {\n//     if (url.includes('youtube.com') || url.includes('youtu.be')) {\n//       const videoId = url.split('v=')[1] || url.split('/').pop();\n//       return `https://www.youtube.com/embed/${videoId}`;\n//     }\n//     if (url.includes('vimeo.com')) {\n//       const videoId = url.split('/').pop();\n//       return `https://player.vimeo.com/video/${videoId}`;\n//     }\n//     if (url.includes('facebook.com')) {\n//       return `https://www.facebook.com/plugins/video.php?href=${encodeURIComponent(url)}&show_text=false&t=0`;\n//     }\n//     return url;\n//   };\n\n//   const embedUrl = getEmbedUrl(video.link);\n\n//   return (\n//     <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\">\n//       <div className=\"relative w-full max-w-4xl bg-white rounded-lg overflow-hidden\">\n//         <button onClick={onClose} className=\"absolute top-2 right-2 text-white bg-red-500 rounded-full p-1 hover:bg-red-600\">\n//           <X size={24} />\n//         </button>\n//         <div className=\"w-full h-[80vh]\">\n//           {embedUrl ? (\n//             <iframe\n//               src={embedUrl}\n//               title={video.title}\n//               className=\"w-full h-full\"\n//               allowFullScreen\n//             ></iframe>\n//           ) : (\n//             <div className=\"w-full h-full flex items-center justify-center bg-gray-100\">\n//               <div className=\"text-center\">\n//                 <AlertCircle size={48} className=\"mx-auto mb-4 text-yellow-500\" />\n//                 <p>This video cannot be embedded.</p>\n//                 <a href={video.link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-500 hover:underline mt-2 inline-block\">\n//                   Open video in new tab\n//                 </a>\n//               </div>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// const VideoLibrary = () => {\n//   const [videosByCategory, setVideosByCategory] = useState({});\n//   const [playingVideo, setPlayingVideo] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     fetchVideos();\n//   }, []);\n\n//   const fetchVideos = async () => {\n//     try {\n//       setLoading(true);\n//       const response = await fetch('/.netlify/functions/getVideos');\n//       if (!response.ok) throw new Error('Failed to fetch videos');\n//       const data = await response.json();\n\n//       const groupedVideos = data.reduce((acc, video) => {\n//         if (!acc[video.category]) {\n//           acc[video.category] = [];\n//         }\n//         acc[video.category].push({\n//           ...video,\n//           thumbnail: getVideoThumbnail(video.link)\n//         });\n//         return acc;\n//       }, {});\n\n//       setVideosByCategory(groupedVideos);\n//     } catch (error) {\n//       setError(error.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getVideoThumbnail = (url) => {\n//     if (url.includes('youtube.com') || url.includes('youtu.be')) {\n//       const videoId = url.split('v=')[1] || url.split('/').pop();\n//       return `https://img.youtube.com/vi/${videoId}/0.jpg`;\n//     }\n//     if (url.includes('vimeo.com')) {\n//       const videoId = url.split('/').pop();\n//       return `https://vumbnail.com/${videoId}.jpg`;\n//     }\n//     if (url.includes('facebook.com')) {\n//       return (\n//         <div className=\"w-full h-full bg-blue-500 flex items-center justify-center\">\n//           <Facebook size={36} color=\"white\" />\n//         </div>\n//       );\n//     }\n//     return '/api/placeholder/300/200';\n//   };\n\n//   if (loading) return <div className=\"flex justify-center items-center h-screen\">Loading...</div>;\n//   if (error) return <div className=\"flex justify-center items-center h-screen text-red-500\">Error: {error}</div>;\n\n//   return (\n//     <div className=\"p-6\">\n//       {Object.entries(videosByCategory).map(([category, videos]) => (\n//         <div key={category} className=\"mb-8\">\n//           <h2 className=\"text-2xl font-bold mb-4\">{category}</h2>\n//           <div className=\"d-flex flex-row -mx-2 justify-between\"> {/* Ensure that VideoCards align properly */}\n//             {videos.map(video => (\n//               <VideoCard key={video.id} video={video} onPlay={setPlayingVideo} />\n//             ))}\n//           </div>\n//         </div>\n//       ))}\n//       {playingVideo && <VideoPlayer video={playingVideo} onClose={() => setPlayingVideo(null)} />}\n//     </div>\n//   );\n// };\n\n// export default VideoLibrary;","map":{"version":3,"names":[],"sources":["/Users/vivekhome/Projects/diy-video-library/src/components/VideoLibrary.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import { Star, X, AlertCircle, Facebook } from 'lucide-react';\n\n// const VideoCard = ({ video, onPlay }) => (\n//   <div className=\"flex flex-col w-48 m-2 cursor-pointer border\">\n//     <div className=\"relative w-full h-28 bg-gray-200 rounded-md overflow-hidden flex items-center justify-center\" onClick={() => onPlay(video)}>\n//       {React.isValidElement(video.thumbnail) ? (\n//         video.thumbnail\n//       ) : (\n//         <img src={video.thumbnail} alt={video.title} className=\"w-full h-full object-cover\" />\n//       )}\n//     </div>\n//     <h3 className=\"mt-2 text-sm font-semibold truncate\">{video.title}</h3>\n//     <div className=\"flex mt-1\">\n//       {[...Array(5)].map((_, i) => (\n//         <Star\n//           key={i}\n//           size={16}\n//           fill={i < video.rating ? 'currentColor' : 'none'}\n//           className={i < video.rating ? 'text-yellow-400' : 'text-gray-300'}\n//         />\n//       ))}\n//     </div>\n//   </div>\n// );\n\n// const VideoPlayer = ({ video, onClose }) => {\n//   const getEmbedUrl = (url) => {\n//     if (url.includes('youtube.com') || url.includes('youtu.be')) {\n//       const videoId = url.split('v=')[1] || url.split('/').pop();\n//       return `https://www.youtube.com/embed/${videoId}`;\n//     }\n//     if (url.includes('vimeo.com')) {\n//       const videoId = url.split('/').pop();\n//       return `https://player.vimeo.com/video/${videoId}`;\n//     }\n//     if (url.includes('facebook.com')) {\n//       return `https://www.facebook.com/plugins/video.php?href=${encodeURIComponent(url)}&show_text=false&t=0`;\n//     }\n//     return url;\n//   };\n\n//   const embedUrl = getEmbedUrl(video.link);\n\n//   return (\n//     <div className=\"fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50\">\n//       <div className=\"relative w-full max-w-4xl bg-white rounded-lg overflow-hidden\">\n//         <button onClick={onClose} className=\"absolute top-2 right-2 text-white bg-red-500 rounded-full p-1 hover:bg-red-600\">\n//           <X size={24} />\n//         </button>\n//         <div className=\"w-full h-[80vh]\">\n//           {embedUrl ? (\n//             <iframe\n//               src={embedUrl}\n//               title={video.title}\n//               className=\"w-full h-full\"\n//               allowFullScreen\n//             ></iframe>\n//           ) : (\n//             <div className=\"w-full h-full flex items-center justify-center bg-gray-100\">\n//               <div className=\"text-center\">\n//                 <AlertCircle size={48} className=\"mx-auto mb-4 text-yellow-500\" />\n//                 <p>This video cannot be embedded.</p>\n//                 <a href={video.link} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-blue-500 hover:underline mt-2 inline-block\">\n//                   Open video in new tab\n//                 </a>\n//               </div>\n//             </div>\n//           )}\n//         </div>\n//       </div>\n//     </div>\n//   );\n// };\n\n// const VideoLibrary = () => {\n//   const [videosByCategory, setVideosByCategory] = useState({});\n//   const [playingVideo, setPlayingVideo] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n\n//   useEffect(() => {\n//     fetchVideos();\n//   }, []);\n\n//   const fetchVideos = async () => {\n//     try {\n//       setLoading(true);\n//       const response = await fetch('/.netlify/functions/getVideos');\n//       if (!response.ok) throw new Error('Failed to fetch videos');\n//       const data = await response.json();\n\n//       const groupedVideos = data.reduce((acc, video) => {\n//         if (!acc[video.category]) {\n//           acc[video.category] = [];\n//         }\n//         acc[video.category].push({\n//           ...video,\n//           thumbnail: getVideoThumbnail(video.link)\n//         });\n//         return acc;\n//       }, {});\n\n//       setVideosByCategory(groupedVideos);\n//     } catch (error) {\n//       setError(error.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   const getVideoThumbnail = (url) => {\n//     if (url.includes('youtube.com') || url.includes('youtu.be')) {\n//       const videoId = url.split('v=')[1] || url.split('/').pop();\n//       return `https://img.youtube.com/vi/${videoId}/0.jpg`;\n//     }\n//     if (url.includes('vimeo.com')) {\n//       const videoId = url.split('/').pop();\n//       return `https://vumbnail.com/${videoId}.jpg`;\n//     }\n//     if (url.includes('facebook.com')) {\n//       return (\n//         <div className=\"w-full h-full bg-blue-500 flex items-center justify-center\">\n//           <Facebook size={36} color=\"white\" />\n//         </div>\n//       );\n//     }\n//     return '/api/placeholder/300/200';\n//   };\n\n//   if (loading) return <div className=\"flex justify-center items-center h-screen\">Loading...</div>;\n//   if (error) return <div className=\"flex justify-center items-center h-screen text-red-500\">Error: {error}</div>;\n\n//   return (\n//     <div className=\"p-6\">\n//       {Object.entries(videosByCategory).map(([category, videos]) => (\n//         <div key={category} className=\"mb-8\">\n//           <h2 className=\"text-2xl font-bold mb-4\">{category}</h2>\n//           <div className=\"d-flex flex-row -mx-2 justify-between\"> {/* Ensure that VideoCards align properly */}\n//             {videos.map(video => (\n//               <VideoCard key={video.id} video={video} onPlay={setPlayingVideo} />\n//             ))}\n//           </div>\n//         </div>\n//       ))}\n//       {playingVideo && <VideoPlayer video={playingVideo} onClose={() => setPlayingVideo(null)} />}\n//     </div>\n//   );\n// };\n\n// export default VideoLibrary;\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}