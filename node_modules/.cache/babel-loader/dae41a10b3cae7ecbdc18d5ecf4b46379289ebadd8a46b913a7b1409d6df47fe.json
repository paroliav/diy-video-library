{"ast":null,"code":"var _jsxFileName = \"/Users/vivekhome/Projects/diy-video-library/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport VideoLibrary from './components/VideoLibrary_v2';\nimport VideoPlayer from './components/VideoPlayer_v2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [videos, setVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [categories, setCategories] = useState({});\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    fetchVideos();\n  }, []);\n  const fetchVideos = async () => {\n    try {\n      const response = await fetch('/.netlify/functions/getVideo');\n      const data = await response.json();\n      setVideos(data);\n\n      // Categorize videos\n      const categorizedVideos = data.reduce((acc, video) => {\n        const category = video.category || 'Uncategorized';\n        if (!acc[category]) acc[category] = [];\n        acc[category].push(video);\n        return acc;\n      }, {});\n      setCategories(categorizedVideos);\n    } catch (error) {\n      console.error('Error fetching videos:', error);\n    }\n  };\n  const handleVideoClick = video => {\n    setSelectedVideo(video);\n  };\n  const handleVideoClose = () => {\n    setSelectedVideo(null);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app\",\n    children: selectedVideo ? /*#__PURE__*/_jsxDEV(VideoPlayer, {\n      video: selectedVideo,\n      onClose: handleVideoClose\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(VideoLibrary, {\n      categories: categories,\n      onVideoClick: handleVideoClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"MBkPDK7Nm67Msub422qkJ/enCC0=\");\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import { BrowserRouter as Router, Route, Link, Routes } from 'react-router-dom';\n// import { Menu } from 'lucide-react';\n// import VideoLibrary from './components/VideoLibrary';\n// import AddEditVideo from './components/AddEditVideo';\n// import './App.css';\n\n// const App = () => {\n//   const [videos, setVideos] = useState([]);\n//   const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchVideos();\n//   }, []);\n\n//   const fetchVideos = async () => {\n//     try {\n//       const response = await fetch('/.netlify/functions/getVideos');\n//       const data = await response.json();\n//       setVideos(data);\n//     } catch (error) {\n//       console.error('Error fetching videos:', error);\n//     }\n//   };\n\n//   return (\n//     <Router>\n//       <div className=\"app\">\n//         <nav className=\"navbar\">\n//           <Link to=\"/\" className=\"logo\">DIY Videos</Link>\n//           <button className=\"menu-button\" onClick={() => setIsMenuOpen(!isMenuOpen)}>\n//             <Menu size={24} />\n//           </button>\n//           {isMenuOpen && (\n//             <div className=\"menu\">\n//               <Link to=\"/\" onClick={() => setIsMenuOpen(false)}>Video Library</Link>\n//               <Link to=\"/add\" onClick={() => setIsMenuOpen(false)}>Add New Video</Link>\n//             </div>\n//           )}\n//         </nav>\n\n//         <Routes>\n//           <Route path=\"/\" element={<VideoLibrary videos={videos} onUpdate={fetchVideos} />} />\n//           <Route path=\"/add\" element={<AddEditVideo onSave={fetchVideos} />} />\n//           <Route path=\"/edit/:id\" element={<AddEditVideo videos={videos} onSave={fetchVideos} />} />\n//         </Routes>\n//       </div>\n//     </Router>\n//   );\n// };\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","VideoLibrary","VideoPlayer","jsxDEV","_jsxDEV","App","_s","videos","setVideos","selectedVideo","setSelectedVideo","categories","setCategories","loading","setLoading","fetchVideos","response","fetch","data","json","categorizedVideos","reduce","acc","video","category","push","error","console","handleVideoClick","handleVideoClose","className","children","onClose","fileName","_jsxFileName","lineNumber","columnNumber","onVideoClick","_c","$RefreshReg$"],"sources":["/Users/vivekhome/Projects/diy-video-library/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport VideoLibrary from './components/VideoLibrary_v2';\nimport VideoPlayer from './components/VideoPlayer_v2';\n\nconst App = () => {\n  const [videos, setVideos] = useState([]);\n  const [selectedVideo, setSelectedVideo] = useState(null);\n  const [categories, setCategories] = useState({});\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    fetchVideos();\n  }, []);\n\n  const fetchVideos = async () => {\n    try {\n      const response = await fetch('/.netlify/functions/getVideo');\n      const data = await response.json();\n      \n      setVideos(data);\n\n      // Categorize videos\n      const categorizedVideos = data.reduce((acc, video) => {\n        const category = video.category || 'Uncategorized';\n        if (!acc[category]) acc[category] = [];\n        acc[category].push(video);\n        return acc;\n      }, {});\n      setCategories(categorizedVideos);\n\n    } catch (error) {\n      console.error('Error fetching videos:', error);\n    }\n  };\n\n  const handleVideoClick = (video) => {\n    setSelectedVideo(video);\n  };\n\n  const handleVideoClose = () => {\n    setSelectedVideo(null);\n  };\n\n  return (\n    <div className=\"app\">\n      {selectedVideo ? (\n        <VideoPlayer video={selectedVideo} onClose={handleVideoClose} />\n      ) : (\n        <VideoLibrary categories={categories} onVideoClick={handleVideoClick} />\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n\n\n// import React, { useState, useEffect } from 'react';\n// import { BrowserRouter as Router, Route, Link, Routes } from 'react-router-dom';\n// import { Menu } from 'lucide-react';\n// import VideoLibrary from './components/VideoLibrary';\n// import AddEditVideo from './components/AddEditVideo';\n// import './App.css';\n\n// const App = () => {\n//   const [videos, setVideos] = useState([]);\n//   const [isMenuOpen, setIsMenuOpen] = useState(false);\n\n//   useEffect(() => {\n//     fetchVideos();\n//   }, []);\n\n//   const fetchVideos = async () => {\n//     try {\n//       const response = await fetch('/.netlify/functions/getVideos');\n//       const data = await response.json();\n//       setVideos(data);\n//     } catch (error) {\n//       console.error('Error fetching videos:', error);\n//     }\n//   };\n\n//   return (\n//     <Router>\n//       <div className=\"app\">\n//         <nav className=\"navbar\">\n//           <Link to=\"/\" className=\"logo\">DIY Videos</Link>\n//           <button className=\"menu-button\" onClick={() => setIsMenuOpen(!isMenuOpen)}>\n//             <Menu size={24} />\n//           </button>\n//           {isMenuOpen && (\n//             <div className=\"menu\">\n//               <Link to=\"/\" onClick={() => setIsMenuOpen(false)}>Video Library</Link>\n//               <Link to=\"/add\" onClick={() => setIsMenuOpen(false)}>Add New Video</Link>\n//             </div>\n//           )}\n//         </nav>\n\n//         <Routes>\n//           <Route path=\"/\" element={<VideoLibrary videos={videos} onUpdate={fetchVideos} />} />\n//           <Route path=\"/add\" element={<AddEditVideo onSave={fetchVideos} />} />\n//           <Route path=\"/edit/:id\" element={<AddEditVideo videos={videos} onSave={fetchVideos} />} />\n//         </Routes>\n//       </div>\n//     </Router>\n//   );\n// };\n\n// export default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}